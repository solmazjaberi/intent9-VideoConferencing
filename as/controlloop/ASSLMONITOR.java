package generatedbyassl.as.controlloop;

import java.util.Hashtable;
import java.util.Iterator;
import java.util.Map;
import generatedbyassl.as.ASSLSLO;
import generatedbyassl.as.ASSLMETRIC;

/**
 * Generated by ASSL Framework
 * 
 * This is the base control loop's monitor class. A descendent of this class participates in a monitor-analyzer-simulator-executor control loop of an AS/AE.
 */
public class ASSLMONITOR
{

	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds pairs 'SLO name'-'SLO reference' of all the monitored SLOs.
	 */
	protected Hashtable<String, ASSLSLO> vSLO = new Hashtable<String, ASSLSLO>();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds pairs 'metric name'-'metric reference' of all the metrics specified by metrics.
	 */
	protected Hashtable<String, ASSLMETRIC> METRICS = new Hashtable<String, ASSLMETRIC>();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the  control loop's analyzer.
	 */
	private ASSLANALYZER oAnalyzer = null;

	/**
	 * Generated by ASSL Framework
	 * 
	 * Returns a reference to an SLO specified by name.
	 */
	public ASSLSLO getSLO ( String psSLOName )
	{
		return vSLO.get(psSLOName);
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Sets a reference to the vector of monitored SLO.
	 */
	public void setMonitoredSLO ( Hashtable<String, ASSLSLO> pvSLOs )
	{
		vSLO = pvSLOs;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Returns a reference to a metric specified by name.
	 */
	public ASSLMETRIC getMetric ( String psMetricName )
	{
		return METRICS.get(psMetricName);
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Sets a reference to the vector of monitored metrics.
	 */
	public void setMonitoredMetrics ( Hashtable<String, ASSLMETRIC> pvMetrics )
	{
		METRICS = pvMetrics;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Sets a reference to the control loop's analyzer.
	 */
	public void setAnalyzer ( ASSLANALYZER poAnalyzer )
	{
		oAnalyzer = poAnalyzer;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Performs the monitor.
	 */
	public void perform (  )
	{
		Iterator<Map.Entry<String, ASSLSLO>> iSLOs = vSLO.entrySet().iterator();
		Iterator<Map.Entry<String, ASSLMETRIC>> iMetrics = METRICS.entrySet().iterator();
		Hashtable<String, ASSLSLO> vUstfdSLOs = new Hashtable<String, ASSLSLO>();
		Hashtable<String, ASSLMETRIC> vInvldMetrics = new Hashtable<String, ASSLMETRIC>();
		Map.Entry<String, ASSLSLO> currSLO = null;
		Map.Entry<String, ASSLMETRIC> currMetric = null;
		//**** collects invalid metrics and unsatisfied SLO
		while ( iSLOs.hasNext() ) 
		{
			currSLO = iSLOs.next();
			if ( !currSLO.getValue().isSatisfied() ) 
			{
				vUstfdSLOs.put( currSLO.getKey(), currSLO.getValue() );
			}
		}
		while ( iMetrics.hasNext() ) 
		{
			currMetric = iMetrics.next();
			if ( !currMetric.getValue().isValid() ) 
			{
				vInvldMetrics.put( currMetric.getKey(), currMetric.getValue() );
			}
		}
		//**** passes invalid metrics and unsatisfied SLO to analyzer
		oAnalyzer.setUnsatisfiedSLO( vUstfdSLOs );
		oAnalyzer.setInvalidMetrics( vInvldMetrics );
	}

}