package generatedbyassl.as.controlloop;

import java.util.Hashtable;
import java.util.Enumeration;
import java.util.Vector;
import generatedbyassl.as.ASSLSLO;
import generatedbyassl.as.ASSLMETRIC;
import generatedbyassl.as.ASSLACTION;

/**
 * Generated by ASSL Framework
 * 
 * This is the base control loop's simulator class. A descendent of this class participates in a monitor-analyzer-simulator-executor control loop of an AS/AE.
 */
public class ASSLSIMULATOR
{

	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds references to invalid metrics to be processed by the simulator.
	 */
	protected Hashtable<String, ASSLMETRIC> METRICS = new Hashtable<String, ASSLMETRIC>();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds references to unsatisfied SLO to be processed by the simulator.
	 */
	protected Hashtable<String, ASSLSLO> vSLO = new Hashtable<String, ASSLSLO>();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds references to actions to be executed at the next executor performance.
	 */
	protected Vector<ASSLACTION> ACTIONS = new Vector<ASSLACTION>();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the  control loop's executor.
	 */
	private ASSLEXECUTOR oExecutor = null;

	/**
	 * Generated by ASSL Framework
	 * 
	 * Returns a reference to a metric specified by name.
	 */
	public ASSLMETRIC getMetric ( String psMetricName )
	{
		return METRICS.get(psMetricName);
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Sets a reference to the vector of invalid metrics.
	 */
	public void setInvalidMetrics ( Hashtable<String, ASSLMETRIC> pvMetrics )
	{
		METRICS = pvMetrics;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Returns a reference to an SLO specified by name.
	 */
	public ASSLSLO getSLO ( String psSLOName )
	{
		return vSLO.get(psSLOName);
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Sets a reference to the vector of unsatisfied SLO.
	 */
	public void setUnsatisfiedSLO ( Hashtable<String, ASSLSLO> pvSLO )
	{
		vSLO = pvSLO;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Sets a reference to the control loop's executor.
	 */
	public void setExecutor ( ASSLEXECUTOR poExecutor )
	{
		oExecutor = poExecutor;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Simulates solutions to find appropriate actions to fix the 'invalid metric' problem.
	 */
	public boolean simulate ( ASSLMETRIC poMetric )
	{
		//**** Override this method in descendant classes.
		//**** ASSLACTION oDummyAction = new ASSLACTION();
		//**** ACTIONS.add(oDummyAction);
		return false;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Simulates solutions to find appropriate actions to fix the 'unsatisfied SLO' problem.
	 */
	public boolean simulate ( ASSLSLO poSLO )
	{
		//**** Override this method in descendant classes.
		//**** ASSLACTION oDummyAction = new ASSLACTION();
		//**** ACTIONS.add(oDummyAction);
		return false;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Simulates solutions to find appropriate actions to fix the 'invalid metric' problem.
	 */
	protected ASSLACTION getDefaultAction ( ASSLMETRIC poMetric )
	{
		ASSLACTION oDummyAction = new ASSLACTION();
		oDummyAction.setActionMsg( "There is no action set to fix the invalid metric " + poMetric.getClass().getName() + "'");
		return oDummyAction;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Simulates solutions to find appropriate actions to fix the 'unsatisfied SLO' problem.
	 */
	protected ASSLACTION getDefaultAction ( ASSLSLO poSLO )
	{
		//**** Override this method in descendant classes.
		ASSLACTION oDummyAction = new ASSLACTION();
		oDummyAction.setActionMsg( "There is no action set to fix the unsatisfied SLO '" + poSLO.getClass().getName() + "'");
		return oDummyAction;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Performs the simulator.
	 */
	public void perform (  )
	{
		Enumeration<ASSLSLO> eSLOs = vSLO.elements();
		Enumeration<ASSLMETRIC> eMetrics = METRICS.elements();
		ASSLSLO currSLO = null;
		ASSLMETRIC currMetric = null;
		//**** clears old "problem-solving" actions
		ACTIONS.clear();
		//**** simulates solutions to fnd "problem-solving" actions for invalid metrics and unsatisfied SLO
		while ( eSLOs.hasMoreElements() ) 
		{
			currSLO = eSLOs.nextElement();
			if ( !simulate(currSLO) ) 
			{
				ACTIONS.add( getDefaultAction(currSLO) );
			}
		}
		while ( eMetrics.hasMoreElements() ) 
		{
			currMetric = eMetrics.nextElement();
			if ( !simulate(currMetric) ) 
			{
				ACTIONS.add( getDefaultAction(currMetric) );
			}
		}
		//**** passes to executor the "problem-solving" actions
		Enumeration<ASSLACTION> eActions = ACTIONS.elements();
		ASSLACTION currAction = null;
		while ( eActions.hasMoreElements() ) 
		{
			currAction = eActions.nextElement();
			oExecutor.addActionToExecute( currAction );
		}
		//**** clears to prevent double processing of the same problems
		vSLO.clear();
		METRICS.clear();
	}

}