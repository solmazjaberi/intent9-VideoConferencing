package generatedbyassl.as.controlloop;

import java.util.Hashtable;
import java.util.Iterator;
import java.util.Vector;
import java.util.Map;
import generatedbyassl.as.ASSLSLO;
import generatedbyassl.as.ASSLMETRIC;
import generatedbyassl.as.ASSLACTION;

/**
 * Generated by ASSL Framework
 * 
 * This is the base control loop's analyzer class. A descendent of this class participates in a monitor-analyzer-simulator-executor control loop of an AS/AE.
 */
public class ASSLANALYZER
{

	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds references to invalid metrics to be processed by the analyzer.
	 */
	protected Hashtable<String, ASSLMETRIC> METRICS = new Hashtable<String, ASSLMETRIC>();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds references to unsatisfied SLO to be processed by the analyzer.
	 */
	protected Hashtable<String, ASSLSLO> vSLO = new Hashtable<String, ASSLSLO>();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds references to actions to be executed at the next executor performance.
	 */
	protected Vector<ASSLACTION> ACTIONS = new Vector<ASSLACTION>();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the  control loop's simulator.
	 */
	private ASSLSIMULATOR oSimulator = null;
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the  control loop's executor.
	 */
	private ASSLEXECUTOR oExecutor = null;

	/**
	 * Generated by ASSL Framework
	 * 
	 * Returns a reference to a metric specified by name.
	 */
	public ASSLMETRIC getMetric ( String psMetricName )
	{
		return METRICS.get(psMetricName);
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Sets a reference to the vector of invalid metrics.
	 */
	public void setInvalidMetrics ( Hashtable<String, ASSLMETRIC> pvMetrics )
	{
		METRICS = pvMetrics;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Returns a reference to an SLO specified by name.
	 */
	public ASSLSLO getSLO ( String psSLOName )
	{
		return vSLO.get(psSLOName);
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Sets a reference to the vector of unsatisfied SLO.
	 */
	public void setUnsatisfiedSLO ( Hashtable<String, ASSLSLO> pvSLO )
	{
		vSLO = pvSLO;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Sets a reference to the control loop's simulator.
	 */
	public void setSimulator ( ASSLSIMULATOR poSimulator )
	{
		oSimulator = poSimulator;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Sets a reference to the control loop's executor.
	 */
	public void setExecutor ( ASSLEXECUTOR poExecutor )
	{
		oExecutor = poExecutor;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Evaluates the invalid metric to find appropriate actions to fix the problem.
	 */
	public boolean analyze ( ASSLMETRIC poMetric )
	{
		//**** Override this method in descendant classes.
		//**** ASSLACTION oDummyAction = new ASSLACTION();
		//**** ACTIONS.add(oDummyAction);
		return false;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Evaluates the unsatisfied SLO to find appropriate actions to fix the problem.
	 */
	public boolean analyze ( ASSLSLO poSLO )
	{
		//**** Override this method in descendant classes.
		//**** ASSLACTION oDummyAction = new ASSLACTION();
		//**** ACTIONS.add(oDummyAction);
		return false;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Performs the analyzer.
	 */
	public void perform (  )
	{
		Iterator<Map.Entry<String, ASSLSLO>> iSLOs = vSLO.entrySet().iterator();
		Iterator<Map.Entry<String, ASSLMETRIC>> iMetrics = METRICS.entrySet().iterator();
		Hashtable<String, ASSLSLO> vUstfdSLOs = new Hashtable<String, ASSLSLO>();
		Hashtable<String, ASSLMETRIC> vInvldMetrics = new Hashtable<String, ASSLMETRIC>();
		Map.Entry<String, ASSLSLO> currSLO = null;
		Map.Entry<String, ASSLMETRIC> currMetric = null;
		//**** clears old "problem-solving" actions
		ACTIONS.clear();
		//**** collects invalid metrics and unsatisfied SLO for which cannot be found "problem-solving" actions
		while ( iSLOs.hasNext() ) 
		{
			currSLO = iSLOs.next();
			if ( !analyze(currSLO.getValue()) ) 
			{
				vUstfdSLOs.put( currSLO.getKey(), currSLO.getValue() );
			}
		}
		while ( iMetrics.hasNext() ) 
		{
			currMetric = iMetrics.next();
			if ( !analyze(currMetric.getValue()) ) 
			{
				vInvldMetrics.put( currMetric.getKey(), currMetric.getValue() );
			}
		}
		//**** passes to simulator the invalid metrics and unsatisfied SLO with no "problem-solving" actions
		oSimulator.setUnsatisfiedSLO( vUstfdSLOs );
		oSimulator.setInvalidMetrics( vInvldMetrics );
		//**** passes to executor the "problem-solving" actions dedicated to fix invalid metrics and unsatisfied SLO
		oExecutor.setActionToExecute( ACTIONS );
		//**** clears to prevent double processing of the same problems
		vSLO.clear();
		METRICS.clear();
	}

}