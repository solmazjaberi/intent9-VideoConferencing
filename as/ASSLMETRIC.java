package generatedbyassl.as;

/**
 * Generated by ASSL Framework
 * 
 * This is the superclass for all ASSL AS/AE metrics.
 */
public class ASSLMETRIC
	extends Thread
{

	/**
	 * Generated by ASSL Framework
	 * 
	 * The metric's type - ASSL METRIC_TYPE {} clause.
	 */
	public String METRIC_TYPE = "QUALITY";
	/**
	 * Generated by ASSL Framework
	 * 
	 * The metric's description - ASSL DESCRIPTION {} clause.
	 */
	public String DESCRIPTION = "";
	/**
	 * Generated by ASSL Framework
	 * 
	 * The metric's measure unit - ASSL MEASURE_UNIT {} clause.
	 */
	public String MEASURE_UNIT = "";
	/**
	 * Generated by ASSL Framework
	 * 
	 * Flags if the metric has changed its VALUE since the last update.
	 */
	protected boolean bHasChanged = false;
	/**
	 * Generated by ASSL Framework
	 * 
	 * Determines whether the metric has been started.
	 */
	private boolean bStarted = false;
	/**
	 * Generated by ASSL Framework
	 * 
	 * Determines whether the ASSL metric must stop.
	 */
	protected boolean bStopMetric = false;

	/**
	 * Generated by ASSL Framework
	 * 
	 * This method stops the ASSL metric.
	 */
	public synchronized boolean isChanged (  )
	{
		return bHasChanged;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Checks whether the metric is valid. A metric is considered valid (true) iff the value it is holding satisfies all the threshold class values.
	 */
	public synchronized boolean isValid (  )
	{
		// Override this method in descendant classes. 
		return true;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Returns true if the metric has been started.
	 */
	public synchronized boolean isStarted (  )
	{
		return bStarted;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * This method stops the ASSL metric.
	 */
	public void stopMetric (  )
	{
		bStopMetric=true;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Updates the metric value.
	 */
	public synchronized void refresh (  )
	{
		// Override this method in descendant classes. 
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * This method runs the metric thread until the stop conditions are not fulfilled.
	 */
	public void run (  )
	{
		String sMsg = "METRIC '" + this.getClass().getName() + "': started";
		System.out.println( sMsg );
		bStarted = true;
		//**** runs the metric
		while ( !bStopMetric ) 
		{
			try
			{
				Thread.sleep(100);
			}
			catch ( InterruptedException ex ) 
			{
				System.err.println( ex.getMessage() );
			}
			refresh();
		}
	}

}