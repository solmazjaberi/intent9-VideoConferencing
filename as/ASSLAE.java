package generatedbyassl.as;

import java.util.Hashtable;
import java.util.Enumeration;

/**
 * Generated by ASSL Framework
 * 
 * This is the superclass for all ASSL autonomic elements.
 */
public class ASSLAE
	extends Thread
{

	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds pairs 'SLO name'-'SLO reference' of all the SLOs specified by ASSLAE.
	 */
	public Hashtable<String, ASSLSLO> AESLO = new Hashtable<String, ASSLSLO>();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds pairs 'policy name'-'policy reference' of all the self-management policies followed by ASSLAE.
	 */
	protected Hashtable<String, ASSLPOLICY> vPolicies = new Hashtable<String, ASSLPOLICY>();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds pairs 'recovery protocol name'-'recovery protocol reference' of all the recovery protocols specified by ASSLAE.
	 */
	public Hashtable<String, ASSLRECOVERY_PROTOCOL> RECOVERY_PROTOCOLS = new Hashtable<String, ASSLRECOVERY_PROTOCOL>();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds pairs 'behavior model name'-'behavior model reference' of all the behavior models specified by ASSLAE.
	 */
	public Hashtable<String, ASSLBEHAVIOR_MODEL> BEHAVIOR_MODELS = new Hashtable<String, ASSLBEHAVIOR_MODEL>();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds pairs 'outcome name'-'outcome reference' of all the outcomes specified by ASSLAE.
	 */
	public Hashtable<String, ASSLOUTCOME> OUTCOMES = new Hashtable<String, ASSLOUTCOME>();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds pairs 'action name'-'action reference' of all the actions specified by ASSLAE.
	 */
	public Hashtable<String, ASSLACTION> ACTIONS = new Hashtable<String, ASSLACTION>();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds pairs 'event name'-'event reference' of all the events specified by ASSLAE.
	 */
	public Hashtable<String, ASSLEVENT> EVENTS = new Hashtable<String, ASSLEVENT>();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds pairs 'metric name'-'metric reference' of all the metrics specified by ASSLAE.
	 */
	public Hashtable<String, ASSLMETRIC> METRICS = new Hashtable<String, ASSLMETRIC>();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Determines whether the AE must stop.
	 */
	private boolean bStopAE = false;
	/**
	 * Generated by ASSL Framework
	 * 
	 * Determines whether the AE has been started.
	 */
	private boolean bStarted = false;

	/**
	 * Generated by ASSL Framework
	 * 
	 * Returns a reference to an SLO specified by name.
	 */
	public ASSLSLO getSLO ( String psSLOName )
	{
		return AESLO.get(psSLOName);
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Returns a reference to a policy specified by name.
	 */
	public ASSLPOLICY getPolicy ( String psPolicyName )
	{
		return vPolicies.get(psPolicyName);
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Returns a reference to a recovery protocol specified by name.
	 */
	public ASSLRECOVERY_PROTOCOL getRecoveryProtocol ( String psProtocolName )
	{
		return RECOVERY_PROTOCOLS.get(psProtocolName);
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Returns a reference to a behavior model specified by name.
	 */
	public ASSLBEHAVIOR_MODEL getBehaviorModel ( String psBhvrModelName )
	{
		return BEHAVIOR_MODELS.get(psBhvrModelName);
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Returns a reference to an outcome specified by name.
	 */
	public ASSLOUTCOME getOutcome ( String psOutcome )
	{
		return OUTCOMES.get(psOutcome);
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Returns a reference to an action specified by name.
	 */
	public ASSLACTION getAction ( String psActionName )
	{
		return ACTIONS.get(psActionName);
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Returns a reference to an event specified by name.
	 */
	public ASSLEVENT getEvent ( String psEventName )
	{
		return EVENTS.get(psEventName);
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Returns a reference to a metric specified by name.
	 */
	public ASSLMETRIC getMetric ( String psMetricName )
	{
		return METRICS.get(psMetricName);
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * This method stops the AE.
	 */
	public void stopAE (  )
	{
		bStopAE=true;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Returns true if the AE has been started.
	 */
	public synchronized boolean isStarted (  )
	{
		return bStarted;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Initialises the AE after the system has been started.
	 */
	public synchronized void postStartInit (  )
	{
		Enumeration<ASSLEVENT> eEVENTS = EVENTS.elements();
		while ( eEVENTS.hasMoreElements() ) 
		{
			eEVENTS.nextElement().postStartInit();
		}
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * This method applies all the policies specified by the AE.
	 */
	protected void applayPolicies (  )
	{
		Enumeration<ASSLPOLICY> ePolicies = vPolicies.elements();
		ASSLPOLICY currPolicy = null;
		while ( ePolicies.hasMoreElements() ) 
		{
			currPolicy = ePolicies.nextElement();
			//**** applies only "switched-on" policies
			if ( currPolicy.isSwitchedOn() ) 
			{
				currPolicy.doAllMappings();
			}
		}
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Sets the control loop components.
	 */
	protected void setControlLoop (  )
	{
		//**** ASSL overrides this method in the descendant classes.
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Performs the AE control loop.
	 */
	protected void controlLoop (  )
	{
		//**** ASSL overrides this method in the descendant classes.
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Overrides Thread's start() method - starts the policies first and then the AE.
	 */
	public void start (  )
	{
		Enumeration<ASSLMETRIC> eMetrics = METRICS.elements();
		Enumeration<ASSLEVENT> eEvents = EVENTS.elements();
		Enumeration<ASSLPOLICY> ePolicies = vPolicies.elements();
		ASSLMETRIC currMetric = null;
		ASSLEVENT currEvent = null;
		ASSLPOLICY currPolicy = null;
		//**** starts AE metrics
		while ( eMetrics.hasMoreElements() ) 
		{
			currMetric = eMetrics.nextElement();
			currMetric.start();
			while ( !currMetric.isStarted() ) 
			{
			}
		}
		//**** starts AE events
		while ( eEvents.hasMoreElements() ) 
		{
			currEvent = eEvents.nextElement();
			currEvent.start();
			while ( !currEvent.isStarted() ) 
			{
			}
		}
		//**** starts AE policies
		while ( ePolicies.hasMoreElements() ) 
		{
			currPolicy = ePolicies.nextElement();
			currPolicy.start();
			while ( !currPolicy.isStarted() ) 
			{
			}
		}
		//**** starts the AE
		setControlLoop();
		super.start();
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Runs AE.
	 */
	public void run (  )
	{
		String sMsg = "AE '" + this.getClass().getName() + "': started";
		System.out.println( sMsg );
		System.out.println( "**********************************************************" );
		bStarted = true;
		//**** runs the control loop
		while ( !bStopAE ) 
		{
			controlLoop();
			try
			{
				Thread.sleep(100);
			}
			catch ( InterruptedException ex ) 
			{
				System.err.println( ex.getMessage() );
			}
		}
	}

}